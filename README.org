#+title: OSM4IQ
#+author: osvarcha

osm4iq singifica "Osvarcha's macros for Iq" que traducido es "Las
macros de osvarcha para IQ" que tiene como objetivo crear UDF's
(Funciones definidas por el Usuario) con [[https://www.xlwings.org/][xlwings]], una biblioteca que
enlaza python con excel, tanto para hacer macros como UDF's solo para
windows.

* Epilogo
La documentación y el codigo esta hecho en [[https://orgmode.org][org-mode]] tanto para
escribir las funciones de python como para autodocumentarlas a medida
que avanzo.

#+begin_quote
[[https://orgmode.org][org-mode]] es una herramientas fantastica de [[https://www.gnu.org/software/emacs/][emacs]] es mas que un formato
de texto plano, se usa para crar documentos, notebooks, agenda, notas,
listas en fin es hackeable, tanto asi que todo el codigo se hara en
este notebook que sera una autodocumentación.
#+end_quote

* TODO Instalación
se puede esar miniconda tanto como anaconda, pero este complemento lo
hice con miniconda porque lo considero mas liviano aunque anaconda
incluye toda la paqueteria completa para el analisis de datos.

1. Descargar una distribución de que incluya conda.
   Puede elegir [[https://docs.conda.io/en/latest/miniconda.html][miniconda]] o tambien la distribución completa de
   [[https://www.anaconda.com/products/distribution][anaconda]]
2. Clone este repositorio
3. Crear el entorno conda
   En el repositorio hay un archivo ~environment.yml~ lo cual creara
   el entorno con sus dependencias.
   #+begin_src powershell
conda env create -f environment.yml
   #+end_src
4. Añadir el complento a excel
   Abrir el excel, añadir el complemento ~osm4iq.yml~ y probarlo.

* Macros
Primero una macro basica que viene con Quickstart de xlwings
#+begin_src python :session macros-main :results output :tangle package\macros\main.py
import xlwings as xw

def main():
    wb = xw.Book.caller()
    sheet = wb.sheets[0]
    if sheet["A1"].value == "Hello xlwings!":
        sheet["A1"].value = "Bye xlwings!"
    else:
        sheet["A1"].value = "Hello xlwings!"
#+end_src

#+RESULTS:

* UDF's
Vamos a definir las UDF's

** Funciones demo
Son funciones para saludar
#+begin_src python :session udf-demo :results output :tangle package\udf\demo.py
import xlwings as xw

@xw.func
def hello(name):
    return f"Hello {name}!"
#+end_src

** Funciones num
Funciones numericas

#+begin_src python :session udf-num :results output :tangle package\udf\num.py
import xlwings as xw

@xw.func
def double_sum(x, y):
    """Returns twice the sum of the two arguments"""
    return 2 * (x + y)
#+end_src

** TODO Complemento IQ
Este proyecto inicio porque queria reemplazar el complemento de mi
profesor de termodinamica pero sin VBA.

#+begin_quote
Talvez nunca complete esta lista porque solo utilizare algunas
funciones que utilice en el curso, pero mi objetivo de este
complemento es que sea mas utilice las bondades de python con sus 
paqueterias como añadir [[https://www.sympy.org/es/][SymPy]] para calculo simbolico ejecutados desde
la cinta de opciones, asi como [[https://numpy.org/][numpy]] para calculo matematico, y
algunos complementos se optimizaran con [[https://numba.pydata.org_quot][numba]].
#+end_quote

*** TODO Funciones necesarias para IQ
Estas funciones son necesarias para todo IQ pues son ecuaciones matematicas
representadas en funciones.

**** TODO Interporlación
La Interpolación lineal es una tecnica rapida para calculos que son cercanos
especialmente si se usa en tablas porque son datos cercanos y con poco error
experimental. La siguiente ecuación representa representa la función a crear.

\begin{equation}
f_1\left ( x \right ) = f\left ( x_0 \right ) + \frac{f\left ( x_1 \right ) -
f\left ( x_0 \right )}{x_1 - x_0}\left ( x - x_0 \right )
\end{equation}

#+begin_src python
def inter_lineal(x, X, Y):
    """Interporlación lineal con dos vectores de datos y el valor a interpolar"""
    pass
#+end_src

*** TODO Calculos

*** TODO Coeficientes de actividad

*** TODO Coeficientes de Fugacidad en Mezcla

*** TODO Energias de Exceso

*** TODO Energia Interna Residual

*** TODO Energia  Libre de Gibbs Residual

*** TODO Entalpía Residual

*** TODO Entropía Residual

*** TODO Factor de Compresibilidad

*** TODO Operaciones Unitarias

*** TODO Parámetros de EoS

*** TODO Presión

*** TODO Presión de Vapor

*** TODO Propiedades Fisicoquímicas y de Transporte

*** TODO Psicrometría

*** TODO Trabajo de Expansión/Comprensión

*** TODO Volumen Molar

* Archivo final

#+begin_src python :tangle osm4iq.py
import xlwings as xw

# Funciones a importar
from package.macros.main import main
from package.funciones.demo import hello, hola_mundo
from package.funciones.num import double_sum

if __name__ == "__main__":
    xw.Book("osm4iq.xlsm").set_mock_caller()
    main()
#+end_src

#+RESULTS:




