#+title: OSM4IQ
#+author: osvarcha
#+OPTIONS: toc:nil
#+OPTIONS: tex:t
#+EXPORT_FILE_NAME: README

osm4iq singifica "Osvarcha's macros for Iq" que traducido es "Las
macros de osvarcha para IQ" que tiene como objetivo crear UDF's
(Funciones definidas por el Usuario) con [[https://www.xlwings.org/][xlwings]], una biblioteca que
enlaza python con excel, tanto para hacer macros como UDF's solo para
windows.

* Table de Cotenido :TOC_3_ORG:
- [[Epilogo][Epilogo]]
- [[Instalación][Instalación]]
- [[Macros][Macros]]
- [[UDF's][UDF's]]
  - [[Funciones demo][Funciones demo]]
  - [[Funciones num][Funciones num]]
  - [[Complemento IQ][Complemento IQ]]
    - [[Funciones necesarias para IQ][Funciones necesarias para IQ]]
    - [[Calculos][Calculos]]
    - [[Coeficientes de actividad][Coeficientes de actividad]]
    - [[Coeficientes de Fugacidad en Mezcla][Coeficientes de Fugacidad en Mezcla]]
    - [[Energias de Exceso][Energias de Exceso]]
    - [[Energia Interna Residual][Energia Interna Residual]]
    - [[Energia  Libre de Gibbs Residual][Energia  Libre de Gibbs Residual]]
    - [[Entalpía Residual][Entalpía Residual]]
    - [[Entropía Residual][Entropía Residual]]
    - [[Factor de Compresibilidad][Factor de Compresibilidad]]
    - [[Operaciones Unitarias][Operaciones Unitarias]]
    - [[Parámetros de EoS][Parámetros de EoS]]
    - [[Presión][Presión]]
    - [[Presión de Vapor][Presión de Vapor]]
    - [[Propiedades Fisicoquímicas y de Transporte][Propiedades Fisicoquímicas y de Transporte]]
    - [[Psicrometría][Psicrometría]]
    - [[Trabajo de Expansión/Comprensión][Trabajo de Expansión/Comprensión]]
    - [[Volumen Molar][Volumen Molar]]
- [[Archivo final][Archivo final]]

* Epilogo
La documentación y el codigo esta hecho en [[https://orgmode.org][org-mode]] tanto para
escribir las funciones de python como para autodocumentarlas a medida
que avanzo.

#+begin_quote
[[https://orgmode.org][org-mode]] es una herramientas fantastica de [[https://www.gnu.org/software/emacs/][emacs]] es mas que un formato
de texto plano, se usa para crar documentos, notebooks, agenda, notas,
listas en fin es hackeable, tanto asi que todo el codigo se hara en
este notebook que sera una autodocumentación.
#+end_quote

* TODO Instalación
se puede esar miniconda tanto como anaconda, pero este complemento lo
hice con miniconda porque lo considero mas liviano aunque anaconda
incluye toda la paqueteria completa para el analisis de datos.

1. Descargar una distribución de que incluya conda.
   Puede elegir [[https://docs.conda.io/en/latest/miniconda.html][miniconda]] o tambien la distribución completa de
   [[https://www.anaconda.com/products/distribution][anaconda]]
2. Clone este repositorio
3. Crear el entorno conda
   En el repositorio hay un archivo ~environment.yml~ lo cual creara
   el entorno con sus dependencias.
   #+begin_src powershell
conda env create -f environment.yml
   #+end_src
4. Añadir el complento a excel
   Abrir el excel, añadir el complemento ~osm4iq.yml~ y probarlo.

* Macros
Primero una macro basica que viene con Quickstart de xlwings
#+begin_src python :session macros-main :results output :tangle package\macros\main.py
import xlwings as xw

def main():
    wb = xw.Book.caller()
    sheet = wb.sheets[0]
    if sheet["A1"].value == "Hello xlwings!":
        sheet["A1"].value = "Bye xlwings!"
    else:
        sheet["A1"].value = "Hello xlwings!"
#+end_src

#+RESULTS:

* UDF's
Vamos a definir las UDF's

** Funciones demo
Son funciones para saludar
#+begin_src python :session udf-demo :results output :tangle package\udf\demo.py
import xlwings as xw

@xw.func
def hello(name):
    return f"Hello {name}!"
#+end_src

** Funciones num
Funciones numericas

#+begin_src python :session udf-num :results output :tangle package\udf\num.py
import xlwings as xw

@xw.func
def double_sum(x, y):
    """Returns twice the sum of the two arguments"""
    return 2 * (x + y)
#+end_src

** TODO Complemento IQ
Este proyecto inicio porque queria reemplazar el complemento de mi
profesor de termodinamica pero sin VBA.

#+begin_quote
Talvez nunca complete esta lista porque solo utilizare algunas
funciones que utilice en el curso, pero mi objetivo de este
complemento es que sea mas utilice las bondades de python con sus 
paqueterias como añadir [[https://www.sympy.org/es/][SymPy]] para calculo simbolico ejecutados desde
la cinta de opciones, asi como [[https://numpy.org/][numpy]] para calculo matematico, y
algunos complementos se optimizaran con [[https://numba.pydata.org_quot][numba]].
#+end_quote

*** TODO Funciones necesarias para IQ
Son funciones basicas, necsarias para los otros complementos IQ

**** DONE Indice mayor mas cercano
Una función comodin que encontrada el indice del mayor mas cercano de una lista
ordenada.

#+begin_src python :results silent :tangle package\udf\iq\tools.py
def indice_mayor_cercano(dato, lista):
    """Devuelve el indice del dato mayor mas cercano de 
    una lista ordenada
    """
    mayores = filter(lambda x: x > dato, lista)
    if mayores:
        return lista.index(next(mayores))
    else:
        return len(lista) - 1
#+end_src

*** TODO Calculos
Funciones de IQ para calculos, mas que todos metodos de interporlación, ordenar,
extrapolación y demas...

#+begin_src python :results silent :tangle package\udf\iq\calculos.py
from tools import indice_mayor_cercano
#+end_src
**** DONE Ordenar Datos
Ordena los datos representados en dos vectores $X$ y $Y$, los ordena tanto de
forma ascedente como descendente segun el vector $X$

#+begin_src python :results silent :tangle package\udf\iq\calculos.py
def ordenar_datos(X, Y, ascendente=True):
    """Ordena de forma ascendente o descendente:
    Ordena el vector X de forma ascendente o descendente y al mismo tiempo
    reordena el vector Y de acuerdo a la nueva posición de los datos del vector
    'X'
    
    Args:
    X (list): Vector de datos x
    Y (list): Vector de datos y
    ascendente (bool, optional): Si es True, los datos serán ordenados de forma
    ascendente.  Si es False, los datos serán ordenados de forma
    descendente. Por defecto es True.
    
    Returns:
    X_ordenado (list): Vector X ordenado
    Y_ordenado (list): Vector Y ordenado
    """
    # Creamos una lista de tuplas
    datos = list(zip(X,Y))

    # Ordenamos la lista por el valor de x
    datos_ordenados = sorted(datos, key=lambda t: t[0], reverse=not ascendente)
    
    # separamos los datos ordenados en dos vectores X_ordenado e Y_ordenado
    X_ordenado = list(map(lambda t: t[0], datos_ordenados))
    Y_ordenado = list(map(lambda t: t[1], datos_ordenados))
    
    return X_ordenado, Y_ordenado
#+end_src

**** DONE Interpolación Lineal
Devuelve el valor interpolado de $y$, para un $x$, a partir de datos tabulados
$X$ y $Y$, ordenados en $X$, mediante una interpolación lineal.

#+begin_quote
Esta función necesita la función *ordenar datos* de tools.py
#+end_quote

| argumento | Regimen     | Tipo    | Descripción                  |
|-----------+-------------+---------+------------------------------|
| $x$       | Obligatorio | Escalar | Valor del punto a interpolar |
| $X$       | Obligatorio | Vector  | Datos $X$.                   |
| $Y$       | Obligatorio | Vector  | Datis $Y$.                   |

#+begin_src python :results silent :tangle package\udf\iq\calculos.py
def inter_lineal(x, X, Y):
    """Interporlación lineal para hallar el punto x con dos vectores X y Y

    El vector 'X' contiene los datos de la variable independiente y el vector
    'Y' contiene los datos de la variable dependiente

    """
    
    # ORdenamos los datos
    X_ordenado, Y_ordenado = ordenar_ascendente(X,Y)
    
    def eq_int_lineal(x, x_0, y_0, x_1, y_1):
        """Ecuación de la interpolación lineal simple
        """
        return y_0 + (y_1-y_0)/(x_1-x_0) * (x-x_0)
    
    # Vemos si "x" esta en el vector X
    if (lambda x, X: x in X)(x, X):
        i = X.index(x)
        return Y[i]
    
    else:
        # Si no esta sacamos el indice mayor cercano
        i = indice_mayor_cercano(x, X)
        # con el indice utilizamos la ecución
        y = eq_int_lineal(x, X[i-1], Y[i-1], X[i], Y[i])
        return y
#+end_src

*** TODO Coeficientes de actividad

*** TODO Coeficientes de Fugacidad en Mezcla

*** TODO Energias de Exceso

*** TODO Energia Interna Residual

*** TODO Energia  Libre de Gibbs Residual

*** TODO Entalpía Residual

*** TODO Entropía Residual

*** TODO Factor de Compresibilidad

*** TODO Operaciones Unitarias

*** TODO Parámetros de EoS

*** TODO Presión

*** TODO Presión de Vapor

*** TODO Propiedades Fisicoquímicas y de Transporte

*** TODO Psicrometría

*** TODO Trabajo de Expansión/Comprensión

*** TODO Volumen Molar

* Archivo final

#+begin_src python :tangle osm4iq.py
import xlwings as xw

# Funciones a importar
from package.macros.main import main
from package.funciones.demo import hello, hola_mundo
from package.funciones.num import double_sum

if __name__ == "__main__":
    xw.Book("osm4iq.xlsm").set_mock_caller()
    main()
#+end_src

#+RESULTS:




